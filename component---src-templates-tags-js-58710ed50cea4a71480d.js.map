{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","style","margin","rhythm","map","node","slug","fields","title","frontmatter","key","to"],"mappings":"4FAAA,wDAmEeA,UA9DF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,6BACE,wBACEK,MAAO,CACLC,OAAWC,YAAO,GAAZ,IAAkBA,YAAO,KAEjCH,GACF,wBACEC,MAAO,CACLC,OAAWC,YAAO,GAAZ,IAAkBA,YAAO,KAGhCL,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACE,wBAAIE,IAAKJ,GACP,kBAAC,OAAD,CAAMK,GAAIL,GAAOE,QASzB,kBAAC,OAAD,CAAMG,GAAG,QACPV,MAAO,CACLC,OAAWC,YAAO,GAAZ,IAAkBA,YAAO,KAFnC","file":"component---src-templates-tags-js-58710ed50cea4a71480d.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  return (\n    <div>\n      <h1\n        style={{\n          margin: `${rhythm(2)} ${rhythm(1)}`\n        }}\n      >{tagHeader}</h1>\n      <ul\n        style={{\n          margin: `${rhythm(1)} ${rhythm(2)}`\n        }}\n      >\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\"\n        style={{\n          margin: `${rhythm(1)} ${rhythm(2)}`\n        }}\n      >All tags</Link>\n    </div>\n  )\n}\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\nexport default Tags\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}