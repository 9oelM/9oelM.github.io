{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"8a1db65c-ab71-5f77-afcf-3d447c1989a2","excerpt":"Dynamic scope “Dynamic scope seems to imply, and for good reason, that there’s a model whereby  scope can be determined dynamically at runtime , rather than…","html":"<h2>Dynamic scope</h2>\n<blockquote>\n<p>“Dynamic scope seems to imply, and for good reason, that there’s a model whereby <strong>scope can be determined dynamically at runtime</strong>, rather than statically at author-time.” </p>\n</blockquote>\n<p>What’s important is <strong>where a function is called from.</strong> The scope chain is based on the call stack. </p>\n<h3><code class=\"language-text\">this</code></h3>\n<p><code class=\"language-text\">this</code> is similar to dynamic scope in that it cares about how a function is called.</p>\n<h2>Try-catch instead of a block</h2>\n<p>in ES6:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some useful calculations</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> someVariableToBeContained <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>someVariableToBeContained<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>someVariableToBeContained<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>would just work. But before ES6:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some useful calculations</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>someVariableToBeContained<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span>someVariableToBeContained<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>..yeah. </p>\n<h3><code class=\"language-text\">let</code> block</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span><span class=\"token punctuation\">(</span>sth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// scope is limited to the inside of this (explicit) block.</span></code></pre></div>\n<p>but this is not supported by ES6 syntax. It needs a tool to convert itself. So just doing a normal block would be okay too.</p>\n<h3><code class=\"language-text\">Lexical-this</code></h3>\n<p>javascript had this problem that when you do not have favorable function scopes, <code class=\"language-text\">this</code> keyword could not be used except when you use something like <code class=\"language-text\">var self = this</code>.</p>\n<p>ES6 solves this problem by the arrow function by introducing <code class=\"language-text\">lexical-this</code>.\nBelow code is copied from YDKJS:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    cool<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">coolFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// no need for var self = this;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// arrow-function ftw?</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> \n                <span class=\"token comment\">// you do not have to refer to self here anymore. </span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"awesome?\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">cool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// awesome?</span></code></pre></div>\n<p>And below code is more awesome because it shows our intention by adding <code class=\"language-text\">bind()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    cool<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">coolFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `this` is safe because of `bind(..)`</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"more awesome\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// look, `bind()`!</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">cool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// more awesome</span></code></pre></div>","frontmatter":{"title":"Scope and closure (6): Dynamic scope, Polyfilling Block Scope, and Lexical-this","date":"Invalid date","description":null}}},"pageContext":{"slug":"/2018-04-08--Scope-and-closure-(6):-Dynamic-scope,-Polyfilling-Block-Scope,-and-Lexical-this/","previous":{"fields":{"slug":"/2018-04-08--GOOP:-2.-Think-more-about-the-business/"},"frontmatter":{"title":"GOOP: 2. Think more about the business"}},"next":{"fields":{"slug":"/2018-04-08--Presentation-design:-Marketing-project-on-Spotify/"},"frontmatter":{"title":"Presentation design: Marketing project on Spotify"}}}}