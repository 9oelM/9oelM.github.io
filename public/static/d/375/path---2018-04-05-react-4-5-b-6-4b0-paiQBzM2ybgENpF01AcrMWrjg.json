{"data":{"site":{"siteMetadata":{"title":null,"author":null}},"markdownRemark":{"id":"db463608-151f-5f3c-828e-f7a9fb917aa7","excerpt":"FYI My notes are overwritten on the content copied from  https://reactjs.org/docs . Lifecycle It’s about usage of resources.  1. Mounting It is when an element…","html":"<h2>FYI</h2>\n<p>My notes are overwritten on the content copied from <a href=\"https://reactjs.org/docs\">https://reactjs.org/docs</a>.</p>\n<h2>Lifecycle</h2>\n<p>It’s about usage of resources. </p>\n<h3>1. Mounting</h3>\n<p>It is when an element is rendered to the DOM for the first time.</p>\n<h3>2. Unmounting</h3>\n<p>It is when the DOM produced by the element is removed. </p>\n<h2>Lifecycle hooks (methods for mounting and unmounting)</h2>\n<h3>1. <code class=\"language-text\">componentDidMount()</code></h3>\n<p>This method runs after the component output has been rendered to the DOM.</p>\n<h3>2. <code class=\"language-text\">componentWillUnmount()</code></h3>\n<p>This method runs before the component output will be removed.</p>\n<h2>State</h2>\n<h3>Using <code class=\"language-text\">setState()</code></h3>\n<p>do not do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.state.sth = &quot;something&quot;;</code></pre></div>\n<p>do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.setState({sth: &quot;something&quot;});</code></pre></div>\n<h3><code class=\"language-text\">this.props</code> and <code class=\"language-text\">this.state</code> may be updated asynchronously.</h3>\n<p>So you should avoid using <code class=\"language-text\">this.state</code> and <code class=\"language-text\">this.props</code> at the same time because it is dangerous. Instead, use a function with previous state as the first argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.setState((prevState, props) =&gt; ({\n  counter: prevState.counter + props.increment\n}));</code></pre></div>","frontmatter":{"title":"React (4)","date":"April 05, 2018","description":null}}},"pageContext":{"slug":"/2018-04-05--React-(4)/","previous":{"fields":{"slug":"/2018-03-31--Scope-and-closure-(4):-closure/"},"frontmatter":{"title":"Scope and closure (4): closure"}},"next":{"fields":{"slug":"/2018-04-07--Time-Complexity/"},"frontmatter":{"title":"Time Complexity"}}}}