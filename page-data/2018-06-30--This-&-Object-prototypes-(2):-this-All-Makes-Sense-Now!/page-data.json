{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-06-30--This-&-Object-prototypes-(2):-this-All-Makes-Sense-Now!/","result":{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"2e82a281-9d1a-5460-919b-4c6ac591e508","excerpt":"1. Default binding without the strict mode in effect, the global object is eligible for the default binding: however, with the strict mode in effect, the global…","html":"<h3 id=\"1-default-binding\" style=\"position:relative;\">1. Default binding<a href=\"#1-default-binding\" aria-label=\"1 default binding permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>without the strict mode in effect, the global object is eligible for the default binding:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n    console.log( this.a );\n}\n\nvar a = 2;\n\nfoo(); // 2\n```</code></pre></div>\n<p>however, <strong>with</strong> the strict mode in effect, the global object is <strong>not</strong> eligible for the default binding:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n    &quot;use strict&quot;;\n    console.log( this.a );\n}\n\nvar a = 2;\n\nfoo(); // TypeError: `this` is `undefined`\n```</code></pre></div>\n<p>yet, if the call-site is in strict mode, it does not matter (default binding works). It only does not work when the strict mode is applied inside the contents of the function call:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n    console.log( this.a );\n}\n\nvar a = 2;\n\n(function(){ // call-site\n\t&quot;use strict&quot;;\n\n\tfoo(); // 2\n})();\n```</code></pre></div>\n<h3 id=\"2-implicit-binding\" style=\"position:relative;\">2. Implicit binding<a href=\"#2-implicit-binding\" aria-label=\"2 implicit binding permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>When there is a context object (object having a reference to a function or a variable) for a function reference, the implicit binding rule says that <strong>it’s that object which should be used for the function call’s this binding</strong>.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n\tconsole.log( this.a );\n}\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n};\n\nobj.foo(); // 2\n```</code></pre></div>\n<p>‘shadowing’(?) works too:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript   \nfunction foo() {\n\tconsole.log( this.a );\n}\n\nvar obj2 = {\n\ta: 42,\n\tfoo: foo\n};\n\nvar obj1 = {\n\ta: 2,\n\tobj2: obj2\n};\n\nobj1.obj2.foo(); // 42\n```</code></pre></div>\n<p>you <strong>lose a implicit binding</strong> when you call an implicitly bound function from a global function. </p>\n<p>Just any global context calling the function that had an implicit binding would look for a global variable. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript   \nfunction foo() {\n    console.log( this.a );\n}\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n};\n\nvar bar = obj.foo; // function reference/alias!\n\nvar a = &quot;oops, global&quot;; // `a` also property on global object\n\nbar(); // &quot;oops, global&quot;\n```</code></pre></div>\n<h3 id=\"3-explicit-binding\" style=\"position:relative;\">3. Explicit binding<a href=\"#3-explicit-binding\" aria-label=\"3 explicit binding permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Use <code class=\"language-text\">call</code> and <code class=\"language-text\">apply</code> to use a selected object for <code class=\"language-text\">this</code> binding. Also refer to <a href=\"https://9oelm.github.io/development/2018/04/09/This-&#x26;-Object-prototypes-(1)-this-or-That.html\">the previous post</a>.</p>\n<p>Invoke <code class=\"language-text\">foo</code> with explicit binding to <code class=\"language-text\">obj</code> using <code class=\"language-text\">call</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n\tconsole.log( this.a );\n}\n\nvar obj = {\n\ta: 2\n};\n\nfoo.call( obj ); // 2\n```</code></pre></div>\n<h4 id=\"the-trick-hard-binding\" style=\"position:relative;\">The trick: hard binding<a href=\"#the-trick-hard-binding\" aria-label=\"the trick hard binding permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>You use <code class=\"language-text\">foo.call</code> no matter where the call site is. This allows you to always bind to the object you want to.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n\tconsole.log( this.a );\n}\n\nvar obj = {\n\ta: 2\n};\n\nvar bar = function() {\n\tfoo.call( obj ); // --&gt;&gt;&gt;&gt; you use `foo.call` no matter where the call site is\n};\n\nbar(); // 2\nsetTimeout( bar, 100 ); // 2\n\n// `bar` hard binds `foo`&#39;s `this` to `obj`\n// so that it cannot be overriden\nbar.call( window ); // 2\n```</code></pre></div>\n<h4 id=\"so-you-can-use-the-hard-binding-like-this\" style=\"position:relative;\">So you can use the hard binding like this<a href=\"#so-you-can-use-the-hard-binding-like-this\" aria-label=\"so you can use the hard binding like this permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Nothing to be explained. Just return the function <code class=\"language-text\">foo.apply(...)</code> to use <code class=\"language-text\">bar(...)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo(something) {\n\tconsole.log( this.a, something );\n\treturn this.a + something;\n}\n\nvar obj = {\n\ta: 2\n};\n\nvar bar = function() {\n\treturn foo.apply( obj, arguments );\n};\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```</code></pre></div>\n<h4 id=\"functionprototypebind\" style=\"position:relative;\"><code class=\"language-text\">Function.prototype.bind</code><a href=\"#functionprototypebind\" aria-label=\"functionprototypebind permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>Because this is a common pattern, ES5 has a built in utility <code class=\"language-text\">Function.prototype.bind</code> that does the same thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo(something) {\n\tconsole.log( this.a, something );\n\treturn this.a + something;\n}\n\nvar obj = {\n\ta: 2\n};\n\nvar bar = foo.bind( obj );\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```</code></pre></div>\n<h3 id=\"4-new-binding\" style=\"position:relative;\">4. <code class=\"language-text\">new</code> Binding<a href=\"#4-new-binding\" aria-label=\"4 new binding permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Essentially what you are doing with <code class=\"language-text\">new</code> is just to call another function that serves as a constructor. </p>\n<blockquote>\n<p>When a function is invoked with new in front of it, otherwise known as a constructor call, the following things are done automatically:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. a brand new object is created (aka, constructed) out of thin air\n2. the newly constructed object is [[Prototype]]-linked\n3. the newly constructed object is set as the this binding for that function call\n4. unless the function returns its own alternate object, the new-invoked function call will automatically return the newly constructed object.\n\n```javascript\nfunction foo(a) {\nthis.a = a;\n}\n\nvar bar = new foo( 2 );\nconsole.log( bar.a ); // 2\n```</code></pre></div>\n<h2 id=\"precedence\" style=\"position:relative;\">Precedence<a href=\"#precedence\" aria-label=\"precedence permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>First, speaking of the answer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nDefault &lt; Implicit &lt; Explicit &lt; new\n```</code></pre></div>\n<h3 id=\"implicit--explicit\" style=\"position:relative;\"><code class=\"language-text\">Implicit &lt; Explicit</code><a href=\"#implicit--explicit\" aria-label=\"implicit  explicit permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n    console.log( this.a );\n}\n\nvar obj1 = {\n\ta: 2,\n\tfoo: foo\n};\n\nvar obj2 = {\n\ta: 3,\n\tfoo: foo\n};\n// Implicit\nobj1.foo(); // 2\nobj2.foo(); // 3\n\n// Explicit\nobj1.foo.call( obj2 ); // 3\nobj2.foo.call( obj1 ); // 2\n```</code></pre></div>\n<h3 id=\"implicit--new\" style=\"position:relative;\"><code class=\"language-text\">Implicit &lt; new</code><a href=\"#implicit--new\" aria-label=\"implicit  new permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo(something) {\n\tthis.a = something;\n}\n\nvar obj1 = {\n\tfoo: foo\n};\n\nvar obj2 = {};\n\nobj1.foo( 2 );\nconsole.log( obj1.a ); // 2\n\nobj1.foo.call( obj2, 3 );\nconsole.log( obj2.a ); // 3\n\nvar bar = new obj1.foo( 4 );\nconsole.log( obj1.a ); // 2\nconsole.log( bar.a ); // 4\n```</code></pre></div>\n<h3 id=\"explicit--new\" style=\"position:relative;\"><code class=\"language-text\">Explicit &lt; new</code><a href=\"#explicit--new\" aria-label=\"explicit  new permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">new</code> can override <code class=\"language-text\">hard binding</code> (a form of explicit binding)\nnotice that <code class=\"language-text\">new bar(3)</code> does not change <code class=\"language-text\">obj1.a</code> to 3, but creates a new object named <code class=\"language-text\">baz</code> that contains <code class=\"language-text\">baz.a</code> which is 3.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo(something) {\n\tthis.a = something;\n}\n\nvar obj1 = {};\n\nvar bar = foo.bind( obj1 );\nbar( 2 );\nconsole.log( obj1.a ); // 2\n\nvar baz = new bar( 3 );\nconsole.log( obj1.a ); // 2\nconsole.log( baz.a ); // 3\n```</code></pre></div>\n<h3 id=\"4-rules-determining-this\" style=\"position:relative;\">4 Rules determining <code class=\"language-text\">this</code><a href=\"#4-rules-determining-this\" aria-label=\"4 rules determining this permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Just look at the four questions to answer <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#determining-this\">here</a> at the original writing. </p>\n<h3 id=\"exceptions\" style=\"position:relative;\">Exceptions<a href=\"#exceptions\" aria-label=\"exceptions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"this-is-ignored-when-you-pass-null-or-undefined\" style=\"position:relative;\"><code class=\"language-text\">this</code> is ignored when you pass <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code><a href=\"#this-is-ignored-when-you-pass-null-or-undefined\" aria-label=\"this is ignored when you pass null or undefined permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction foo() {\n\tconsole.log( this.a );\n}\n\nvar a = 2;\n\nfoo.call( null ); // 2\n```</code></pre></div>\n<h3 id=\"safer-this-using-objectcreatenull\" style=\"position:relative;\">Safer <code class=\"language-text\">this</code> using <code class=\"language-text\">Object.create(null)</code><a href=\"#safer-this-using-objectcreatenull\" aria-label=\"safer this using objectcreatenull permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>You wanna create an empty object without any side effects that can be used with <code class=\"language-text\">this</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a:\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\", b:\"</span> <span class=\"token operator\">+</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// our DMZ empty object</span>\n<span class=\"token keyword\">var</span> ø <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// spreading out array as parameters</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span> ø<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a:2, b:3</span>\n\n<span class=\"token comment\">// currying with `bind(..)`</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> ø<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a:2, b:3</span></code></pre></div>\n<p><code class=\"language-text\">Object.create(null)</code> has no deligation to <code class=\"language-text\">Object.prototype</code>, so it’s more empty than <code class=\"language-text\">{}</code>.</p>\n<h3 id=\"lexical-this-using-es6-arrow-function\" style=\"position:relative;\">Lexical <code class=\"language-text\">this</code> using ES6 arrow function<a href=\"#lexical-this-using-es6-arrow-function\" aria-label=\"lexical this using es6 arrow function permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>Arrow-functions adopt the this binding from the enclosing (function or global) scope.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// return an arrow function</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// `this` here is lexically adopted from `foo()`</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> obj1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> obj2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, not 3!</span></code></pre></div>\n<p><code class=\"language-text\">foo</code> is made bound to <code class=\"language-text\">obj1</code>, so would <code class=\"language-text\">bar</code>.</p>\n<blockquote>\n<p>The lexical binding of an arrow-function cannot be overridden (even with <code class=\"language-text\">new</code>).</p>\n</blockquote>","frontmatter":{"title":"This & Object prototypes (2): this All Makes Sense Now!","date":"June 30, 2018"}}},"pageContext":{"slug":"/2018-06-30--This-&-Object-prototypes-(2):-this-All-Makes-Sense-Now!/","previous":{"fields":{"slug":"/2018-06-30--This-&-Object-prototypes-(3):-Objects/"},"frontmatter":{"title":"This & Object prototypes (3): Objects","tab":"post"}},"next":{"fields":{"slug":"/2018-09-05--Async-and-await/"},"frontmatter":{"title":"Async, await, promise","tab":"post"}}}},"staticQueryHashes":["3128451518","426816048"]}