{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-06-30--This-&-Object-prototypes-(3):-Objects/","result":{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"08241f41-7e1c-54e0-84f8-866a96847637","excerpt":"Types and objects Types in JS string number boolean null undefined object Built-in Objects String Number Boolean Object Function Array Date RegExp Error  and…","html":"<h2 id=\"types-and-objects\" style=\"position:relative;\">Types and objects<a href=\"#types-and-objects\" aria-label=\"types and objects permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"types-in-js\" style=\"position:relative;\">Types in JS<a href=\"#types-in-js\" aria-label=\"types in js permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>object</li>\n</ul>\n<h3 id=\"built-in-objects\" style=\"position:relative;\">Built-in Objects<a href=\"#built-in-objects\" aria-label=\"built in objects permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n<h3 id=\"string-and-string-and-other-primitives\" style=\"position:relative;\"><code class=\"language-text\">String</code> and <code class=\"language-text\">string</code>, and other primitives<a href=\"#string-and-string-and-other-primitives\" aria-label=\"string and string and other primitives permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> strPrimitive <span class=\"token operator\">=</span> <span class=\"token string\">\"I am a string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> strPrimitive<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// \"string\"</span>\nstrPrimitive <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">var</span> strObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"I am a string\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> strObject<span class=\"token punctuation\">;</span> \t\t\t\t\t\t\t\t<span class=\"token comment\">// \"object\"</span>\nstrObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// inspect the object sub-type</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> strObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// [object String]</span></code></pre></div>\n<p>Things we can know:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. `strPrimitive` is not created by `String` constructor, so it logs `false` on `instanceof String` test.\n2. `strObject` on the other hand is created by `String` constructor.\n3. `\"I am a string\"` is actually **not** an object but a primitive literal and immutable value. If you want to do something like `\"I am a string\"[0]\"` or `\"I am a string\".substring(2,4)`, you are going to need a temporary `String` object.</code></pre></div>\n<p>The same logic applies for other objects with corresponding primitives, such as: <code class=\"language-text\">1</code> and <code class=\"language-text\">new Number(1)</code>.</p>\n<h3 id=\"others\" style=\"position:relative;\">Others<a href=\"#others\" aria-label=\"others permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> have no object wrappers.</li>\n<li><code class=\"language-text\">Object</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">Function</code>, and <code class=\"language-text\">RegExp</code> are <strong>ALL OBJECTS</strong> regardless of whether the literal or constructed form is used (ex. <code class=\"language-text\">new Array()</code> and <code class=\"language-text\">[]</code>).</li>\n<li>Simpler literal form is preferred. Only use constructed form if you need extra options.</li>\n</ul>\n<h2 id=\"contents\" style=\"position:relative;\">Contents<a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>An object contains <strong>property names</strong> only that act as pointers (references) to where actual values are stored.</p>\n<h3 id=\"two-ways-of-accessing\" style=\"position:relative;\">Two ways of accessing<a href=\"#two-ways-of-accessing\" aria-label=\"two ways of accessing permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">testObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\ntestObject<span class=\"token punctuation\">.</span>a\n\ntestObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">.</code> and <code class=\"language-text\">[ ]</code> operator function the same. But their usage may vary:</p>\n<ul>\n<li><code class=\"language-text\">.</code> operator requires an <code class=\"language-text\">Identifier</code> compatible property name.</li>\n<li><code class=\"language-text\">[\"..\"]</code> operator can take any UTF-8 compatible string as the property name. (Ex. <code class=\"language-text\">[\"Hey++^]\"</code>)</li>\n<li>You can also extend the logic to make a property name where necessary (make a string first, and then use that as a property name)</li>\n<li>In objects, property names are always strings. <strong>If you use any other value besides a string (primitive) as the property, it will first be <em>converted</em> to a string.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">[</span>myObject<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// \"foo\"</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// \"bar\"</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"[object Object]\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// \"baz\"</span></code></pre></div>\n<p>Notice that for the last property <code class=\"language-text\">myObject</code>, <code class=\"language-text\">toString</code> was called to fill the prop name.</p>\n<h3 id=\"you-can-also-do-this-with-\" style=\"position:relative;\">You can also do this with <code class=\"language-text\">[\"..\"]</code><a href=\"#you-can-also-do-this-with-\" aria-label=\"you can also do this with  permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>This is called “Computed property names”.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span>\nmyObject<span class=\"token punctuation\">[</span><span class=\"token string\">\"foobaz\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// world</span></code></pre></div>\n<h2 id=\"property-vs-method\" style=\"position:relative;\">Property vs Method<a href=\"#property-vs-method\" aria-label=\"property vs method permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>If a function belongs to an object (a class), it is referred to as a ‘method’ ion other languages.</p>\n<p>But technically, as we have seen, functions never <em>belong</em> to objects.</p>\n<p>If you access a property on an object, it is a property access but a method access.</p>\n<blockquote>\n<p><em>Perhaps</em> one could argue that a function becomes a method, not at definition time, but during run-time just for that invocation, depending on how it’s called at its call-site.</p>\n</blockquote>\n<blockquote>\n<p>The safest conclusion is probably that “function” and “method” are interchangeable in JavaScript.</p>\n</blockquote>\n<h2 id=\"arrays\" style=\"position:relative;\">Arrays<a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Arrays are objects, so they can have a property like</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ntest<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hey\"</span>\n\ntest<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></code></pre></div>\n<p><code class=\"language-text\">test.a</code> does not add to the length of the array. It is just a property.</p>\n<p>But if you use a property name that looks like a number, <strong>it will be understood as a numeric index.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntest<span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"zero index\"</span>\ntest<span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"first index\"</span>\ntest<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 2</span></code></pre></div>\n<h2 id=\"objectassign-also--objectname-\" style=\"position:relative;\"><code class=\"language-text\">Object.assign(...)</code> (also <code class=\"language-text\">({ ...objectName })</code>)<a href=\"#objectassign-also--objectname-\" aria-label=\"objectassign also  objectname  permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">Object.assign</code> iterates over all the enumerable, owned keys on the source objects and copies them to the target object (on the LHS)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> additionalObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n                        <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                        <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">pet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matt\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// &lt;&lt;--- the target (newly created) object</span>\n    additionalObj<span class=\"token punctuation\">,</span>\n    testObj\n<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n    {say: ƒ, friends: Array(3), pet: Dog, person: \"Joel\"}\n*/</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>say <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>say<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>friends<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>pet <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>pet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>person <span class=\"token operator\">===</span> testObj<span class=\"token punctuation\">.</span>person<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*  it shows that properties are copied via `=` assignment only.\n    true,\n    true,\n    true,\n    true\n*/</span></code></pre></div>\n<p>An alternative to <code class=\"language-text\">Object.assign(...)</code> is <code class=\"language-text\">{ ...objectName, ..}</code> syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span>\n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joel\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> additionalObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n                        <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                        <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">pet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matt\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>testObj<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>additionalObj\n    <span class=\"token comment\">// you can override properties here</span>\n    <span class=\"token comment\">// like, pet: new Dog(\"Sally\")</span>\n    <span class=\"token comment\">// Notice how simpler and clearer the syntax is!</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n    {say: ƒ, friends: Array(3), pet: Dog, person: \"Joel\"}\n*/</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>say <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>say<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>friends<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>pet <span class=\"token operator\">===</span> additionalObj<span class=\"token punctuation\">.</span>pet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newObj<span class=\"token punctuation\">.</span>person <span class=\"token operator\">===</span> testObj<span class=\"token punctuation\">.</span>person<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*  it shows that properties are copied via `=` assignment only.\n    true,\n    true,\n    true,\n    true\n*/</span></code></pre></div>\n<h2 id=\"property-descriptors\" style=\"position:relative;\">Property descriptors<a href=\"#property-descriptors\" aria-label=\"property descriptors permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>From ES5 onwards, all properties are described in terms of a <strong>property descriptor</strong>.</p>\n<h3 id=\"objectgetownpropertydescriptor\" style=\"position:relative;\"><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code><a href=\"#objectgetownpropertydescriptor\" aria-label=\"objectgetownpropertydescriptor permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Following on from the last example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span> newObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"friends\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// See you have three characteristics: writable, enumerable and configurable.</span>\n<span class=\"token comment\">// {value: Array(3), writable: true, enumerable: true, configurable: true}</span></code></pre></div>\n<h3 id=\"objectdefineproperty\" style=\"position:relative;\"><code class=\"language-text\">Object.defineProperty()</code><a href=\"#objectdefineproperty\" aria-label=\"objectdefineproperty permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> test<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">.</span>myProp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hey</span></code></pre></div>\n<p>It’s just a difficult way of doing <code class=\"language-text\">var test = { myProp: \"hey\" }</code>. Just know that there’s a function called <code class=\"language-text\">Object.defineProperty()</code>.</p>\n<h3 id=\"writable\" style=\"position:relative;\">Writable<a href=\"#writable\" aria-label=\"writable permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>You cannot chance a value of a property if you set <code class=\"language-text\">writable</code> as <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> test<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">.</span>myProp <span class=\"token operator\">=</span> <span class=\"token string\">\"it cannot change\"</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">.</span>myProp <span class=\"token comment\">// hey</span></code></pre></div>\n<p>Yeap. It does not change.</p>\n<p>If you <code class=\"language-text\">use strict</code>, you get an error by attempting to modify the value:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> test<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">.</span>myProp <span class=\"token operator\">=</span> <span class=\"token string\">\"it cannot change\"</span>\n<span class=\"token comment\">/*\nlogs:\n    Uncaught TypeError: Cannot assign to read only property 'myProp' of object '#&lt;Object>'\n*/</span></code></pre></div>\n<h3 id=\"configurable\" style=\"position:relative;\">Configurable<a href=\"#configurable\" aria-label=\"configurable permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>If it’s configurable, you can modify its descriptor definition using <code class=\"language-text\">defineProperty()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> test<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> test<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myProp\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">delete</span> test<span class=\"token punctuation\">.</span>myProp <span class=\"token comment\">//fail</span>\ntest<span class=\"token punctuation\">.</span>myProp <span class=\"token comment\">// \"hey\". still here. not deleted. </span>\n<span class=\"token comment\">/*\n    Uncaught TypeError: Cannot redefine property: myProp\n    at Function.defineProperty (&lt;anonymous>)\n*/</span></code></pre></div>\n<p>As you might have noticed, it is just a one-way action, so it cannot be undone.</p>\n<h2 id=\"immutability\" style=\"position:relative;\">Immutability<a href=\"#immutability\" aria-label=\"immutability permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"object-constant\" style=\"position:relative;\">Object constant<a href=\"#object-constant\" aria-label=\"object constant permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> myObject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_CHANGING\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"whatsup\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Effect: cannot be changed, redefined or deleted.</p>\n<h3 id=\"prevent-extensions\" style=\"position:relative;\">Prevent extensions<a href=\"#prevent-extensions\" aria-label=\"prevent extensions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span> myObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Effect: prevent the object from being added to new properties.</p>\n<h3 id=\"doing-the-above-two-things-at-once-objectseal\" style=\"position:relative;\">Doing the above two things at once: <code class=\"language-text\">Object.seal(..)</code><a href=\"#doing-the-above-two-things-at-once-objectseal\" aria-label=\"doing the above two things at once objectseal permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>It’s literally just that. It seals the object by calling <code class=\"language-text\">preventExtensions()</code> and making <code class=\"language-text\">configurable</code> property as <code class=\"language-text\">false</code>.</p>\n<h3 id=\"doing-one-thing-more-objectfreeze\" style=\"position:relative;\">Doing one thing more: <code class=\"language-text\">Object.freeze(..)</code><a href=\"#doing-one-thing-more-objectfreeze\" aria-label=\"doing one thing more objectfreeze permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Things it does:</p>\n<ul>\n<li><code class=\"language-text\">Object.seal(..)</code></li>\n<li>sets <code class=\"language-text\">writable</code> as <code class=\"language-text\">false</code></li>\n</ul>\n<h2 id=\"get\" style=\"position:relative;\"><code class=\"language-text\">[[Get]]</code><a href=\"#get\" aria-label=\"get permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">myObject.myProp</code> works through <code class=\"language-text\">[[Get]]</code> operation.</p>\n<blockquote>\n<p>The default built-in <code class=\"language-text\">[[Get]]</code> operation for an object first inspects the object for a property of the requested name, and if it finds it, it will return the value accordingly.</p>\n</blockquote>\n<p>Otherwise it returns <code class=\"language-text\">undefined</code> for the requested property that is not found.</p>\n<h2 id=\"put\" style=\"position:relative;\"><code class=\"language-text\">[[Put]]</code><a href=\"#put\" aria-label=\"put permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Simple assignment like <code class=\"language-text\">let something = 1</code> would not just call <code class=\"language-text\">[[Put]]</code>.</p>\n<p>If a property is already present in an object:</p>\n<blockquote>\n<ol>\n<li>Is the property an accessor descriptor (see “Getters &#x26; Setters” section below)? If so, call the setter, if any.</li>\n<li>Is the property a data descriptor with <code class=\"language-text\">writable</code> of <code class=\"language-text\">false</code>? If so, silently fail in <code class=\"language-text\">non-strict mode</code>, or throw <code class=\"language-text\">TypeError</code> in <code class=\"language-text\">strict mode</code>.</li>\n<li>Otherwise, set the value to the existing property as normal.</li>\n</ol>\n</blockquote>\n<p>If a property is not present, it is more complex, which will be covered later.</p>\n<h2 id=\"getters--setters\" style=\"position:relative;\">Getters &#x26; Setters<a href=\"#getters--setters\" aria-label=\"getters  setters permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>You can override getters and setters like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_a\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">set</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_a <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">></span> myObj<span class=\"token punctuation\">.</span>a\n    <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> myObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    <span class=\"token number\">4</span>\n<span class=\"token operator\">></span> myObj<span class=\"token punctuation\">.</span>a\n    <span class=\"token number\">3</span></code></pre></div>\n<h2 id=\"existence\" style=\"position:relative;\">Existence<a href=\"#existence\" aria-label=\"existence permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Distinguishing between <code class=\"language-text\">undefined</code> as a property and that as nothing.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//both would log undefined</span>\n\nmyObj<span class=\"token punctuation\">.</span>test <span class=\"token comment\">// undefined</span>\nmyObj<span class=\"token punctuation\">.</span>sofeiewagionweiogw <span class=\"token comment\">// undefined</span>\n\n<span class=\"token string\">\"test\"</span> <span class=\"token keyword\">in</span> myObj <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"sofeiewagionweiogw\"</span> <span class=\"token keyword\">in</span> myObj <span class=\"token comment\">// false</span>\n\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sofeiewagionweiogw\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h3 id=\"in-vs-hasownproperty\" style=\"position:relative;\"><code class=\"language-text\">in</code> vs <code class=\"language-text\">hasownProperty(..)</code><a href=\"#in-vs-hasownproperty\" aria-label=\"in vs hasownproperty permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">in</code>: checks the object itself and the prototype chain to see if the property is present in these by <strong>looking at the existence of the property name supplied</strong>.</p>\n<p><code class=\"language-text\">hasOwnProperty(..)</code> checks only the target object itself. It will NOT go over the prototype chain.</p>\n<h2 id=\"enumeration\" style=\"position:relative;\">Enumeration<a href=\"#enumeration\" aria-label=\"enumeration permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>\n    myObject<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// make `a` enumerable, as normal</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>\n    myObject<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// make `b` NON-enumerable</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span> <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// .......</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> k<span class=\"token punctuation\">,</span> myObject<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"a\" 2</span></code></pre></div>\n<p>It’s just that <code class=\"language-text\">b</code> exists, but it does not get referred to inside <code class=\"language-text\">for..in</code> loop.</p>\n<ul>\n<li>You can check with <code class=\"language-text\">propertyIsEnumerable(..)</code> too see if the property name exists directly on the object and is enumerable.</li>\n<li><code class=\"language-text\">Object.keys(..)</code> returns an array of all enumerable properties.</li>\n<li><code class=\"language-text\">Object.getOwnPropertyNames(..)</code> returns an array of all properties regardless. Both <code class=\"language-text\">keys(..)</code> and <code class=\"language-text\">getOwnPropertyNames(..)</code> would inspect only the direct object.</li>\n</ul>\n<h2 id=\"iteration\" style=\"position:relative;\">Iteration<a href=\"#iteration\" aria-label=\"iteration permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"forin\" style=\"position:relative;\"><code class=\"language-text\">for..in</code><a href=\"#forin\" aria-label=\"forin permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>iterates over enumerable properties on an object. You are getting the values directly.</p>\n<h3 id=\"normal-let-i--0-i--arrlength-i-loop\" style=\"position:relative;\">Normal <code class=\"language-text\">(let i = 0; i &lt; arr.length; i++)</code> loop<a href=\"#normal-let-i--0-i--arrlength-i-loop\" aria-label=\"normal let i  0 i  arrlength i loop permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>iterates over indices to get values.</p>\n<h3 id=\"foreach\" style=\"position:relative;\"><code class=\"language-text\">forEach(..)</code><a href=\"#foreach\" aria-label=\"foreach permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>iterates over all values in an array, ignoring any callback return values.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token comment\">// undefined. </span></code></pre></div>\n<h3 id=\"every\" style=\"position:relative;\"><code class=\"language-text\">every(..)</code><a href=\"#every\" aria-label=\"every permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>iterates until the end or the callback returns a falsy value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> index <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\nlogs:\n3\n4\n5\n*/</span></code></pre></div>\n<h3 id=\"some\" style=\"position:relative;\"><code class=\"language-text\">some(..)</code><a href=\"#some\" aria-label=\"some permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>reverse of <code class=\"language-text\">every(..)</code>. Iterates until the end or the callback returns a truthy value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span> index <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\nlogs:\n3\n*/</span></code></pre></div>\n<h3 id=\"index-order-is-not-guaranteed\" style=\"position:relative;\">Index order is not guaranteed<a href=\"#index-order-is-not-guaranteed\" aria-label=\"index order is not guaranteed permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<blockquote>\n<p>The order of iteration over an object’s properties is not guaranteed and may vary between different JS engines.</p>\n</blockquote>\n<h3 id=\"forof\" style=\"position:relative;\"><code class=\"language-text\">for..of</code><a href=\"#forof\" aria-label=\"forof permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>","frontmatter":{"title":"This & Object prototypes (3): Objects","date":"June 30, 2018","keywords":null},"fields":{"readingTime":{"text":"9 min read"}}}},"pageContext":{"slug":"/2018-06-30--This-&-Object-prototypes-(3):-Objects/","previous":{"fields":{"slug":"/2018-05-29--Some-hacking-notes/","readingTime":{"text":"9 min read"}},"frontmatter":{"title":"Some hacking notes","tab":"post","tags":["hacking","windows"],"keywords":null}},"next":{"fields":{"slug":"/2018-06-30--This-&-Object-prototypes-(2):-this-All-Makes-Sense-Now!/","readingTime":{"text":"6 min read"}},"frontmatter":{"title":"This & Object prototypes (2): this All Makes Sense Now!","tab":"post","tags":["development","javascript"],"keywords":null}}}},"staticQueryHashes":["3128451518","426816048"]}