{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017-10-01--Difference-among-const-let-and-var/","result":{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"f7e89de9-cf8d-5d14-bdba-3dc52e8f88cd","excerpt":"Varaiable declaration makes no error. Hoisting Hoisting works for . Scope\nFor , it’s a function scope.  and  Variable declaration makes an error. Hoisting No…","html":"<h3 id=\"var\" style=\"position:relative;\"><code class=\"language-text\">var</code><a href=\"#var\" aria-label=\"var permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>Varaiable declaration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = &#39;bar1&#39;;\nvar foo = &#39;bar2&#39;;</code></pre></div>\n<p>makes no error.</p>\n<p><strong>Hoisting</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(foo); // undefined\nvar foo;</code></pre></div>\n<p>Hoisting works for <code class=\"language-text\">var</code>.</p>\n<p><strong>Scope</strong>\nFor <code class=\"language-text\">var</code>, it’s a <strong>function scope</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function test(){\n  var foo = &#39;bar1&#39;;\n  cosole.log(foo); // bar1\n  if (true) {\n    var foo = &#39;bar2&#39;;\n    console.log(foo); // bar2\n  }\n  console.log(foo); // foo outside changed to bar2. Means foo outside the if statement and foo inside it are the same variables. \n}</code></pre></div>\n<h3 id=\"let-and-const\" style=\"position:relative;\"><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code><a href=\"#let-and-const\" aria-label=\"let and const permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><strong>Variable declaration</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let foo = &quot;test&quot;;\nlet foo = &quot;test2&quot;;</code></pre></div>\n<p>makes an error.</p>\n<p><strong>Hoisting</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(foo);\n// Error: Uncaught ReferenceError: foo is not defined\nlet foo;</code></pre></div>\n<p>No hoisting for <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.</p>\n<p><strong>Scope</strong>\nBlock-scope for <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let foo = &#39;bar1&#39;;\nconsole.log(foo); // bar1\nif (true) {\n  let foo = &#39;bar2&#39;;\n  console.log(foo) // bar2\n}\nconsole.log(foo); // bar1</code></pre></div>\n<h3 id=\"let-vs-const\" style=\"position:relative;\"><code class=\"language-text\">let</code> vs <code class=\"language-text\">const</code><a href=\"#let-vs-const\" aria-label=\"let vs const permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>It’s all about immutability.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let test = 1\ntest = 2 // possible\n\nconst test2 = 1\ntest = 2 // impossible</code></pre></div>\n<p>and <code class=\"language-text\">const</code> should always be assigned a value when it is declared:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const abc = &quot;abc&quot; // correct\nconst fgh;\nfgh = &quot;fgh&quot;; // incorrect. Cannot happen </code></pre></div>\n<h3 id=\"sources\" style=\"position:relative;\">Sources<a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><a href=\"https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d\">https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d</a></li>\n<li><a href=\"http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/\">http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/</a></li>\n<li><a href=\"https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d%5C\">https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d\\</a></li>\n<li><a href=\"https://medium.com/craft-academy/javascript-variables-should-you-use-let-var-or-const-394f7645c88f\">https://medium.com/craft-academy/javascript-variables-should-you-use-let-var-or-const-394f7645c88f</a></li>\n</ul>","frontmatter":{"title":"Difference among const, let, var","date":"October 01, 2017"}}},"pageContext":{"slug":"/2017-10-01--Difference-among-const-let-and-var/","previous":{"fields":{"slug":"/2017-09-29--Using-tor/"},"frontmatter":{"title":"Using tor","tab":"post"}},"next":{"fields":{"slug":"/2017-10-05--Misc-useful-operations-on-kali-linux/"},"frontmatter":{"title":"Misc useful operations on (kali) linux","tab":"post"}}}},"staticQueryHashes":["3128451518","426816048"]}