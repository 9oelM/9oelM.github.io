{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"1f7923ae-9234-5fae-adcb-c35d389e9413","excerpt":"The first encounter with the problem I was coding as usual.  And I faced an odd encounter at how   works.  Here goes the code to give an example of that…","html":"<h2>The first encounter with the problem</h2>\n<p>I was coding as usual. </p>\n<p>And I faced an odd encounter at how <code class=\"language-text\">forEach</code> works. </p>\n<p>Here goes the code to give an example of that. Imagine the code below is the code from one of the libaries I was using:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IWalkingDead</span> <span class=\"token punctuation\">{</span>\n  saveFromZombies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  possibility<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> walkingDead<span class=\"token punctuation\">:</span> IWalkingDead <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  saveFromZombies<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>possibility <span class=\"token operator\">?</span> \n      <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> was succesfully saved by the chance of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>possibility<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> \n      <span class=\"token template-string\"><span class=\"token string\">`R.I.P </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - by the chance of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>possibility<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  possibility<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And I spotted the code in my company’s app that was kind of doing:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">&gt; walkingDead.saveFromZombies(&#39;Glenn&#39;); // &#39;R.I.P Glenn - by the chance of 0.5&#39;\n&gt; walkingDead.saveFromZombies(&#39;Shane&#39;); // &#39;Shane was succesfully saved by the chance of 0.5&#39;\n&gt; walkingDead.saveFromZombies(&#39;Lori&#39;);  // &#39;R.I.P Lori - by the chance of 0.5&#39;\n&gt; walkingDead.saveFromZombies(&#39;Daryl&#39;); // &#39;Daryl was succesfully saved by the chance of 0.5&#39;</code></pre></div>\n<p>Of course, I did not want this. It’s against DRY principle. So I refactored the code to:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const survivors: Array&lt;string&gt; = [&#39;Glenn&#39;, &#39;Shane&#39;, &#39;Lori&#39;, &#39;Daryl&#39;];\nsurvivors.forEach(options.saveFromZombies);</code></pre></div>\n<p>Cooler and more succinct. </p>\n<p>But I was very well tricked into thinking that this would just work. See what this code gave:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">// survivors.forEach(options.saveFromZombies) outputs:\n&#39;R.I.P Glenn - by the chance of undefined&#39;,\n&#39;R.I.P Shane - by the chance of undefined&#39;,\n&#39;R.I.P Lori - by the chance of undefined&#39;,\n&#39;R.I.P Daryl - by the chance of undefined&#39;</code></pre></div>\n<p>Oops. Ok. Now you are starting to get a grasp of why.</p>\n<p>It’s the <em><code class=\"language-text\">this</code></em> binding. Let’s check what <code class=\"language-text\">this</code> is actually doing inside our code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const walkingDead = {\n  saveFromZombies: function (name) { \n    const msg = Math.random() &lt; this.possibility ? \n      `${name} was succesfully saved by the chance of ${this.possibility}` : \n      `R.I.P ${name} - by the chance of ${this.possibility}`;\n      console.log(msg);\n      console.log(this); // &lt;----- just added this line to check what `this` is doing\n    },\n  possibility: 0.5,\n}</code></pre></div>\n<p>Well, no surprise. It outputs: </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">...\n\nR.I.P Daryl - by the chance of undefined\nObject [global] {\n  DTRACE_NET_SERVER_CONNECTION: [Function],\n  DTRACE_NET_STREAM_END: [Function],\n  DTRACE_HTTP_SERVER_REQUEST: [Function],\n  DTRACE_HTTP_SERVER_RESPONSE: [Function],\n  DTRACE_HTTP_CLIENT_REQUEST: [Function],\n  DTRACE_HTTP_CLIENT_RESPONSE: [Function],\n  global: [Circular],\n  process:\n   process {\n     title: &#39;node&#39;,\n     version: &#39;v10.16.0&#39;,\n     versions:\n      { http_parser: &#39;2.8.0&#39;,\n        node: &#39;10.16.0&#39;,\n        v8: &#39;6.8.275.32-node.52&#39;,\n        uv: &#39;1.28.0&#39;,\n        zlib: &#39;1.2.11&#39;,\n        brotli: &#39;1.0.7&#39;,\n        ares: &#39;1.15.0&#39;,\n        modules: &#39;64&#39;,\n        nghttp2: &#39;1.34.0&#39;,\n        \n....</code></pre></div>\n<p>Ok. So here’s the main point of this article: </p>\n<p><strong>Just passing in the reference of a function that uses <code class=\"language-text\">this</code> referring to somewhere else than a <code class=\"language-text\">globalThis</code>, into a <code class=\"language-text\">forEach</code> might cause an error in javascript because <code class=\"language-text\">this</code> will point to a global <code class=\"language-text\">this</code>.</strong></p>\n<p>So what do we do? Here are some things to let you know:</p>\n<h2>1. Explicitly call the function</h2>\n<p>Yeah this works. This will save some of the guys’ lives. </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const survivors: Array&lt;string&gt; = [&#39;Glenn&#39;, &#39;Shane&#39;, &#39;Lori&#39;, &#39;Daryl&#39;];\nsurvivors.forEach((survivor: string) =&gt; options.saveFromZombies(survivor));\n\n// outputs:\n// R.I.P Glenn - by the chance of 0.5\n// ...</code></pre></div>\n<p>Same for the normal <code class=\"language-text\">function</code> as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const survivors: Array&lt;string&gt; = [&#39;Glenn&#39;, &#39;Shane&#39;, &#39;Lori&#39;, &#39;Daryl&#39;];\nsurvivors.forEach( function (survivor: string) { walkingDead.saveFromZombies(survivor) });\n// outputs:\n// R.I.P Glenn - by the chance of 0.5\n// ...</code></pre></div>\n<h2>2. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Syntax\">Pass <code class=\"language-text\">thisArg</code> as an argument</a></h2>\n<p>These are the parameters for <code class=\"language-text\">forEach</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>currentValue <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can put in the object to be pointed to as <code class=\"language-text\">this</code> inside <code class=\"language-text\">saveFromZombies</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const survivors: Array&lt;string&gt; = [&#39;Glenn&#39;, &#39;Shane&#39;, &#39;Lori&#39;, &#39;Daryl&#39;];\nsurvivors.forEach(options.saveFromZombies, walkingDead);\n\n// outputs:\n// Glenn was succesfully saved by the chance of 0.5\n// ...</code></pre></div>\n<h2>3. Use <code class=\"language-text\">bind</code></h2>\n<p>This is an explicit binding. You tell the javascript engine that you <code class=\"language-text\">saveFromZombies</code> to be bound to <code class=\"language-text\">walkingDead</code> object. </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">const survivors: Array&lt;string&gt; = [&#39;Glenn&#39;, &#39;Shane&#39;, &#39;Lori&#39;, &#39;Daryl&#39;];\nsurvivors.forEach(walkingDead.saveFromZombies.bind(walkingDead));\n\n// outputs:\n// R.I.P Glenn - by the chance of 0.5\n// ...</code></pre></div>\n<h2>Further..</h2>\n<p>Of course, we can, and should apply the same principle when dealing with <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, … and more. </p>\n<h2>Summary</h2>\n<ul>\n<li>We have looked at how <code class=\"language-text\">this</code> might lose context when we put a reference of a function as a callback to <code class=\"language-text\">forEach</code>. </li>\n<li>The solutions are: (1) Explicitly call the function, (2) Pass <code class=\"language-text\">thisArg</code> as an argument, and (3) Use <code class=\"language-text\">bind</code>.</li>\n</ul>\n<p>Happy <code class=\"language-text\">forEach</code> coding! </p>","frontmatter":{"title":"[...].forEach(saveFromZombies) does not always save people","date":"October 12, 2019"}}},"pageContext":{"slug":"/2019-10-12--[...].forEach(sayHello)-does-not-always-say-hello/","previous":{"fields":{"slug":"/2019-10-02--Making-stupid-react-smart-in-re-rendering/"},"frontmatter":{"title":"Making stupid react smart in re-rendering"}},"next":null}}