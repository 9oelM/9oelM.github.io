{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"d2b55af3-c969-5c66-97f8-99b2e97fa566","excerpt":"How to Vue.js + Typescript 1. Install typescript configs and Vue.js environments using  2. Typescript basics Declaring a variable Every variable has a type.  As…","html":"<h1>How to Vue.js + Typescript</h1>\n<h1>1. Install typescript configs and Vue.js environments using <code class=\"language-text\">@vue.cli</code></h1>\n<h1>2. Typescript basics</h1>\n<h2>Declaring a variable</h2>\n<p>Every variable has a type. </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">var data3:number=10;\ndata3=&quot;ddd&quot;;\nconsole.log(data3);</code></pre></div>\n<p>As you see, you attach the type after the name of the variable, withy the colon ”<code class=\"language-text\">:</code>“.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">function test1(value:number){\n    console.log(&quot;value=&quot;+value);\n}\n\ntest1(10);\n\nfunction test2(value1:number,value2:number):number{\n    return value1+value2;\n}\n\nvar result:string=test2(10,&quot;20&quot;);</code></pre></div>\n<p>this one above also. You just attach the type of what’s right just in front. </p>\n<h3>Function arguments</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">function test1(value:number){\n    console.log(&quot;value=&quot;+value);\n}</code></pre></div>\n<h3>Function return value</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">function test2(value1:number,value2:number):number{\n    return value1+value2;\n}</code></pre></div>\n<h3>Again, just to review, variable type</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">var result:string=test2(10,&quot;20&quot;);</code></pre></div>\n<h1>3. Starting off</h1>\n<p>A part of <code class=\"language-text\">Helloworld.vue</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">&lt;script lang=&quot;ts&quot;&gt;\nimport { Component, Prop, Vue } from &quot;vue-property-decorator&quot;;\n\n@Component\nexport default class HelloWorld extends Vue {\n  @Prop()\n  private msg!: string;\n}\n&lt;/script&gt;</code></pre></div>\n<p>You declare things in Vue + Typescript with <code class=\"language-text\">@</code> annotation. It’s called a <strong>decorator</strong>.</p>\n<h2>Define your template class</h2>\n<p>You inherit <code class=\"language-text\">Vue</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">export default class HelloWorld extends Vue</code></pre></div>\n<p>and it’s even simpler to declare class members:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">export default class MyComponent extends Vue {\n    //data\n    public list:string[] = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n    private sth:string[] = [&quot;a&quot;,&quot;b&quot;]\n    //props\n\t@Prop\n    private msg!:string;\n    \n    //computed\n    get sampleData(){\n            \n    }\n    //methods\n    iAmMethod(){\n\n    }\n}</code></pre></div>\n<h2>What exactly is a <a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">decorator</a></h2>\n<p>Decorators are a stage 2 proposal for JavaScript and are available as an <strong>experimental</strong> feature of TypeScript.</p>\n<p>A Decorator is a special kind of declaration that <strong>can be attached to a class declaration, method, accessor, property, or parameter.</strong></p>\n<h3>Class decorator</h3>\n<p>The one we see above is <strong>a class decorator.</strong></p>\n<p>A Class Decorator is declared just before a class declaration. The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition. </p>\n<p>That’s it for now. So this part:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">@Component\nexport default class HelloWorld extends Vue </code></pre></div>\n<p>would mean that <code class=\"language-text\">Component</code> decorator would do necessary operations on the class <code class=\"language-text\">HelloWorld</code> to make it a proper Vue component.</p>\n<h2>Difference between <code class=\"language-text\">public</code> and <code class=\"language-text\">private</code> in this Vue project</h2>","frontmatter":{"title":"How to typescript + Vue","date":"October 24, 2018"}}},"pageContext":{"slug":"/2018-10-24--How-to-typescript-+-Vue/","previous":{"fields":{"slug":"/2018-10-19--Starting-Vue-from-scratch-(1)/"},"frontmatter":{"title":"Starting Vue from scratch (1)"}},"next":{"fields":{"slug":"/2018-11-02--hacking-notes-(1)/"},"frontmatter":{"title":"hacking notes (1)"}}}}