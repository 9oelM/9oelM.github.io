{"data":{"site":{"siteMetadata":{"title":"Joel's dev blog","author":"Joel Mun","siteUrl":"https://9oelm.github.io"}},"markdownRemark":{"id":"d5e276fc-65df-54cb-9e31-ed29e2dde8ed","excerpt":"See javascript.info Mozilla Basics Ok. This is not ES6. Its ES8 (ECMAScript 2017) syntax.  The async function declaration defines an asynchronous function…","html":"<h1>See</h1>\n<ul>\n<li><a href=\"https://javascript.info/async-await\">javascript.info</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">Mozilla</a></li>\n</ul>\n<h2>Basics</h2>\n<p>Ok. This is not ES6. Its ES8 (ECMAScript 2017) syntax. </p>\n<ul>\n<li>\n<blockquote>\n<p>The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">async function</code> returns: </p>\n<blockquote>\n<p>A <strong>Promise</strong> which will be resolved with the value returned by the async function, or rejected with an uncaught exception thrown from within the async function.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> function can have <code class=\"language-text\">await</code>. This waits for the passed promise to be fulfilled. It <strong>pauses</strong> the execution of the async function. Once it’s got the value, it resumes execution.</p>\n</li>\n<li>\n<p><code class=\"language-text\">await</code> is only valid in <code class=\"language-text\">async</code> function. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It’s going to cause a syntax error.</p>\n</li>\n<li>\n<p>If <code class=\"language-text\">async</code> function returns something other than a promise, it will be wrapped automatically into a resolved promise with the value in it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Async and await","date":"September 05, 2018"}}},"pageContext":{"slug":"/2018-09-05--Async-and-await/","previous":{"fields":{"slug":"/2018-09-05--ES6-Promise/"},"frontmatter":{"title":"ES6 Promise"}},"next":{"fields":{"slug":"/2018-09-18--Controlled-youtube-(2):-adding-tests/"},"frontmatter":{"title":"Controlled youtube (2): adding tests"}}}}